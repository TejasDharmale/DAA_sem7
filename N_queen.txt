#include <iostream>
using namespace std;

bool isSafe(int** board, int row, int col, int n) {
    for (int i = 0; i < row; i++) if (board[i][col]) return false;        // Column check
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) if (board[i][j]) return false; // Left diagonal
    for (int i = row, j = col; i >= 0 && j < n; i--, j++) if (board[i][j]) return false;  // Right diagonal
    return true;
}

bool solveNQueens(int** board, int row, int n) {
    if (row == n) return true; // All queens placed
    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col, n)) {
            board[row][col] = 1;
            if (solveNQueens(board, row + 1, n)) return true;
            board[row][col] = 0; // Backtrack
        }
    }
    return false;
}

void printBoard(int** board, int n) {
    cout << "Solution:\n";
    for (int i = 0; i < n; i++, cout << endl)
        for (int j = 0; j < n; j++) cout << board[i][j] << " ";
}

int main() {
    int n, firstQueenCol;
    cout << "Enter board size: ";
    cin >> n;
    int** board = new int*[n];
    for (int i = 0; i < n; i++) board[i] = new int[n]();

    cout << "Enter column for the first queen in row 0 (0 to " << n - 1 << "): ";
    cin >> firstQueenCol;
    if (firstQueenCol < 0 || firstQueenCol >= n) {
        cout << "Invalid column!\n";
        return 1;
    }
    board[0][firstQueenCol] = 1; // Place first queen

    if (solveNQueens(board, 1, n)) printBoard(board, n);
    else cout << "No solution exists.\n";

    for (int i = 0; i < n; i++) delete[] board[i]; // Free memory
    delete[] board;
    return 0;
}
